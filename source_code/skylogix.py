# -*- coding: utf-8 -*-
"""SkyLogix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1acJi0aQC1oM_nR9x04MykMw1gFRe2uhY
"""

import subprocess as sp
import pymysql
import pymysql.cursors
from prettytable import PrettyTable

def InsertEmployee():
    try:
        row = {}

        print("Enter details of employee you want to add to the database")
        row["EID"] = input("Employee ID: ")
        name = (input("Name (Fname Lname): ")).split(' ')
        row["Fname"] = name[0]
        row["Lname"] = name[1]
        row["DOB"] = input("DOB(YYYY-MM-DD): ")
        row["DOJ"] = input("Date of joining(YYYY-MM-DD): ")
        row["Nationality"] = input("Nationality: ")
        row["Gender"] = input("Gender (M/F/O): ")
        row["Job"] = input("Job Type: ")

        query = "INSERT INTO Employee(EmployeeID, Fname, Lname, DOB, Date_Of_Joining, Nationality, Gender, Job_Type) VALUES('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')" % (row["EID"], row["Fname"], row["Lname"], row["DOB"], row["DOJ"], row["Nationality"], row["Gender"], row["Job"])

        cur.execute(query)
        con.commit()

        if row["Job"]== "Pilot":
            LicenseID = input("LicenseID: ")
            Flight_Hours = int(input("Flight Hours: "))
            Aircraft_Type_Rating = input("Aircraft Type Rating:")
            Languages_Known = (input("Enter list of languages known(space separated): ")).split(' ')


            query = "INSERT INTO Pilot(EmployeeID,LicenseID,Flight_Hours,Aircraft_Type_Rating) VALUES('%s','%s','%s','%s')" % (row["EID"],LicenseID,Flight_Hours,Aircraft_Type_Rating)

            cur.execute(query)
            con.commit()

            for i in Languages_Known:
                query = "INSERT INTO Languages_Known(EmployeeID,Language) VALUES('%s' , '%s')" % (row["EID"],i)
                cur.execute(query)
                con.commit()

        elif row["Job"] == "Technician":
            Airport_Code = input("Airport code of airport technician is posted at: ")
            Specializations = input(("Specializations of the technician (comma separated): ")).split(',')
            query = "INSERT INTO Technician(EmployeeID,Airport_Code) VALUES ('%s','%s')" % (row["EID"],Airport_Code)

            cur.execute(query)
            con.commit()

            for i in Specializations:
                query = "INSERT INTO Specializations(EmployeeID,Specialization) VALUES('%s' , '%s')" % (row["EID"],i)
                cur.execute(query)
                con.commit()

        elif row["Job"] == "Flight Attendant":
            SupervisorID = input("EmployeeID of supervisor: ")
            Emergency_Training = input("Brief description of emergency training: ")
            Service_Awards = (input("Enter the service awards recieved (comma separated): ")).split(',')
            Languages_Known = (input("Enter list of languages known(space separated): ")).split(' ')

            query = "INSERT INTO Flight_Attendant(EmployeeID,SupervisorID) VALUES ('%s','%s')" % (row["EID"],SupervisorID)

            cur.execute(query)
            con.commit()

            for i in Service_Awards:
                query = "INSERT INTO Service_Awards(EmployeeID,Award) VALUES ('%s','%s')" % (row["EID"],i)
                cur.execute(query)
                con.commit()

            query = "INSERT INTO Flight_Attendant_Emergency(EmployeeID,Emergency_Training) VALUES ('%s','%s')" % (row["EID"],Emergency_Training)
            cur.execute(query)
            con.commit()

            for i in Languages_Known:
                query = "INSERT INTO Languages_Known(EmployeeID,Language) VALUES('%s' , '%s')" % (row["EID"],i)
                cur.execute(query)
                con.commit()

        elif row["Job"] == "Ground Staff":
            Airport_Code = input("Airport code of airport technician is posted at: ")
            Role = input("Role: ")
            Work_Shift = input("Work Shift: ")
            MngrID = input("Manager ID: ")


            query = "INSERT INTO Ground_Staff(EmployeeID,Role,Work_Shift,Airport_Code,MngrID) VALUES ('%s','%s','%s','%s','%s')" % (row["EID"],Role,Work_Shift,Airport_Code,MngrID)

            cur.execute(query)
            con.commit()

        print("Employee Inserted Into Database")

    except Exception as e:
        con.rollback()
        print("Failed to insert into database")
        print(">>>>>>>>>>>>>", e)

    return

def InsertFlightSchedule():
    try:
        row = {}

        print("Enter details of flight scheduled")
        row["FNo"] = input("Flight Number: ")
        row["DepDate"] = input("Scheduled Departure Date (YYYY-MM-DD): ")
        row["DepTime"] = input("Scheduled Departure Time(HH:MM:SS): ")
        row["ArrDate"] = input("Scheduled Arrival Date(YYYY-MM-DD): ")
        row["ArrTime"] = input("Scheduled Arrival Time(HH:MM:SS): ")
        row["Status"] = "Scheduled"
        row["AircraftID"] = input("AircraftID: ")

        row["DepAP"] = input("Departure Airport Code: ")
        row["DepGate"] = int(input("Departure Gate: "))
        row["ArrAP"] = input("Arrival Airport Code: ")
        row["ArrBelt"]= int(input("Arrival Belt: "))

        row["MealID"] = input("Meal served(ID): ")


        query = "INSERT INTO Flight(Flight_No, SchDepDate, SchDepTime, SchArrDate, SchArrTime, Status, AircraftID) VALUES('%s', '%s', '%s', '%s', '%s', '%s', '%s')" % (row["FNo"], row["DepDate"], row["DepTime"], row["ArrDate"], row["ArrTime"],row["Status"], row["AircraftID"])

        cur.execute(query)
        con.commit()

        query = "INSERT INTO Transits_Dep(Flight_No,DepAirportCode,Dep_Gate) VALUES('%s','%s','%s')" % (row["FNo"],row["DepAP"],row["DepGate"])
        cur.execute(query)
        con.commit()

        query = "INSERT INTO Transits_Arr(Flight_No,ArrAirportCode,Arr_Belt) VALUES('%s','%s','%s')" % (row["FNo"],row["ArrAP"],row["ArrBelt"])
        cur.execute(query)
        con.commit()

        query = "INSERT INTO Serves(FlightNo,MealID) VALUES('%s','%s')" % (row["FNo"],row["MealID"])
        cur.execute(query)
        con.commit()

        print("Flight Sceduled Added Into Database")

    except Exception as e:
        con.rollback()
        print("Failed to insert into database")
        print(">>>>>>>>>>>>>", e)

    return

def InsertAircraft():
    try:
        row = {}

        print("Enter aircraft details: ")
        row["AID"] = input("AircraftID: ")
        row["ModelNo"] = input("Model Number: ")
        row["PDate"] = input("Purchase Date(YYYY-MM-DD): ")
        row["Dist"] = float(input("Distance Travelled: "))

        query = "INSERT INTO Aircraft(AircraftID,Model_Number,Purchase_Date,Distance_Travelled) VALUES('%s', '%s', '%s', '%s')" % (row["AID"], row["ModelNo"], row["PDate"], row["Dist"])

        cur.execute(query)
        con.commit()

        print("Aircraft Added Into Database")

    except Exception as e:
        con.rollback()
        print("Failed to insert into database")
        print(">>>>>>>>>>>>>", e)

    return


def InsertPassenger():
    try:
        row = {}

        print("Enter passenger details: ")
        row["Pid"] = input("Passenger ID: ")
        name = (input("Name (Fname Lname): ")).split(' ')
        row["Fname"] = name[0]
        row["Lname"] = name[1]
        row["IDtype"] = input("ID Type: ")
        row["IDnum"] = input("ID Number: ")
        row["Nationality"] = input("Nationality: ")
        row["Email"] = input("Email: ")
        row["DOB"] = input("DOB(HH:MM:SS): ")
        row["Gender"] = input("Gender (M/F/O): ")

        query = "INSERT INTO Passenger(Pid,Fname,Lname,ID_type,ID_No,Nationality,Email,DOB,Gender) VALUES('%s', '%s', '%s', '%s' ,'%s','%s','%s','%s','%s')" % (row["Pid"], row["Fname"], row["Lname"], row["IDtype"], row["IDnum"], row["Nationality"], row["Email"], row["DOB"], row["Gender"])

        cur.execute(query)
        con.commit()

        row["Medical"] = (input("Enter medical details(comma separated): ")).split(',')
        for i in row["Medical"]:
            query = "INSERT INTO MedicalHistory(Pid,Info) VALUES('%s' , '%s')" % (row["Pid"],i)
            cur.execute(query)
            con.commit()


        print("Passenger Added Into Database")

    except Exception as e:
        con.rollback()
        print("Failed to insert into database")
        print(">>>>>>>>>>>>>", e)

    return


def InsertMeal():
    try:
        row = {}

        print("Enter meal details: ")
        row["MealID"] = input("Meal ID: ")
        row["vendor"] = input("Vendor Name: ")
        row["variety"] = input("Meal Variety: ")
        row["price"] = float(input("Meal Price: "))

        query = "INSERT INTO Meals(MealID,vendor,variety,price) VALUES('%s', '%s', '%s', '%s')" % (row["MealID"], row["vendor"], row["variety"], row["price"])

        cur.execute(query)
        con.commit()

        row["Dishes"] = (input("Enter dishes serves(comma separated): ")).split()
        for i in row["Dishes"]:
            query = "INSERT INTO Dishes(MealID,Name) VALUES('%s' , '%s')" % (row["MealID"],i)
            cur.execute(query)
            con.commit()


        print("Meal Added Into Database")

    except Exception as e:
        con.rollback()
        print("Failed to insert into database")
        print(">>>>>>>>>>>>>", e)

    return

def InsertTicket():
    try:
        row = {}

        print("Enter ticket details: ")
        row["FlightNo"] = input("Flight Number: ")
        row["Seat"] = input("Seat Number: ")
        row["Baggage"] = int(input("Baggage allowed: "))
        row["Category"] = input("Category: ")
        row["Price"] = float(input("Ticket Price: "))

        query = "INSERT INTO Ticket(Flight_No,Seat,Baggage,Category,Price) VALUES('%s', '%s', '%s', '%s', '%s')" % (row["FlightNo"], row["Seat"], row["Baggage"], row["Category"], row["Price"])

        cur.execute(query)
        con.commit()

        pid = input("Passenger ID: ")
        meal = input("MealID: ")
        pnr = input("PNR number: ")
        bookingid = input("Booking ID: ")

        query = "INSERT INTO Booking(Pid,Flight_No,Seat,MealID,PNR,BookingID) VALUES('%s','%s','%s','%s','%s','%s')" % (pid,row["FlightNo"],row["Seat"],meal,pnr,bookingid)
        cur.execute(query)
        con.commit()

        for i in range(row["Baggage"]):
            baggageid = i+1
            weight = input(f"Baggage {i+1} weight: ")
            color = input(f"Baggage {i+1} color: ")
            size = input(f"Baggage {i+1} Size: ")
            query = "INSERT INTO Baggage(Flight_No,Seat,BaggageID,Weight,Color,size) VALUES ('%s','%s','%s','%s','%s','%s')" % (row['FlightNo'],row["Seat"],baggageid,weight,color,size)
            cur.execute(query)
            con.commit()


        print("Ticket Added Into Database")

    except Exception as e:
        con.rollback()
        print("Failed to insert into database")
        print(">>>>>>>>>>>>>", e)

    return

def InsertRating():
    try:
        row = {}

        print("Enter rating: ")
        row["Flight_No"] = input("Flight Number: ")
        row["Seat"] = input("Seat Number: ")
        row["Feedback"] = input("Feedback: ")
        row["Stars"] = int(input("Stars(0-5): "))

        query = "INSERT INTO Rating(Flight_No,Seat,Feedback,Stars) VALUES('%s', '%s', '%s', '%s')" % (row["Flight_No"], row["Seat"], row["Feedback"], row["Stars"])

        cur.execute(query)
        con.commit()

        print("Rating Added Into Database")

    except Exception as e:
        con.rollback()
        print("Failed to insert into database")
        print(">>>>>>>>>>>>>", e)

    return

def InsertAirport():
    try:
        row = {}

        print("Enter new airport details: ")
        row["Airport_Code"] = input("Airport Code: ")
        row["Name"] = input("Name of airport: ")
        row["Airport_Type"] = input("Airport Type(I for international, D for domestic): ")
        row["Street"] = input("Street: ")
        row["City"] = input("City: ")
        new_state = input("State: ")
        new_country = input("Country: ")
        row["NoGates"] = int(input("Number of gates in airport: "))
        row["NoBelts"] = int(input("Number of belts in airport: "))
        poc = input("Enter POC phone number: ")      
        

        # Check if the city already exists in the Address table
        cur.execute("SELECT * FROM Address WHERE City = %s", (row["City"],))
        existing_city_data = cur.fetchone()

        if not existing_city_data:
            # If the city doesn't exist, add it to the Address table
            cur.execute("INSERT INTO Address (City, State, Country) VALUES (%s, %s, %s)", (row["City"], new_state, new_country))
            con.commit()


        query = "INSERT INTO Airport(Airport_Code,Name,Airport_Type,Street,City,NoGates,NoBelts) VALUES('%s', '%s', '%s', '%s', '%s','%s','%s')" % (row["Airport_Code"], row["Name"], row["Airport_Type"], row["Street"], row["City"], row["NoGates"], row["NoBelts"])
        cur.execute(query)
        con.commit()

        
        query = "INSERT INTO POC(Airport_Code,PhoneNo) VALUES('%s','%s')" % (row["Airport_Code"],poc)
        cur.execute(query)
        con.commit()


        print("Airport Added Into Database")

    except Exception as e:
        con.rollback()
        print("Failed to insert into database")
        print(">>>>>>>>>>>>>", e)

    return

def Insert():
    print("Please choose type of insertion from below:")
    print("1. Employee")
    print("2. Flight Schedule")
    print("3. Aircraft")
    print("4. Passenger")
    print("5. Meal")
    print("6. Ticket")
    print("7. Rating")
    print("8. Airport")

    ch = int(input("Enter choice> "))
    tmp = sp.call('clear', shell=True)

    if(ch == 1):
        InsertEmployee()

    elif(ch == 2):
        InsertFlightSchedule()

    elif(ch == 3):
        InsertAircraft()

    elif(ch == 4):
        InsertPassenger()

    elif(ch == 5):
        InsertMeal()

    elif(ch == 6):
        InsertTicket()

    elif(ch == 7):
        InsertRating()

    elif(ch == 8):
        InsertAirport()

    else:
        print("Invalid option")

def delete_rating(flight_no, seat, cursor):
    try:
        # Check if the ticket exists
        cursor.execute(f"SELECT * FROM Rating WHERE Flight_No = '{flight_no}' AND Seat = '{seat}'")
        existing_data = cursor.fetchone()

        if existing_data:
            cursor.execute(f"DELETE FROM Rating WHERE Flight_No = '{flight_no}' AND Seat = '{seat}'")
            con.commit()

    except Exception as err:
        print(f"Error: {err}")

def delete_baggage(flight_no, seat, cursor):
    try:
        # Check if the ticket exists
        cursor.execute(f"SELECT * FROM Baggage WHERE Flight_No = '{flight_no}' AND Seat = '{seat}'")
        existing_data = cursor.fetchone()

        if existing_data:
            cursor.execute(f"DELETE FROM Baggage WHERE Flight_No = '{flight_no}' AND Seat = '{seat}'")
            con.commit()

    except Exception as err:
        print(f"Error: {err}")

def delete_booking(flight_no,seat, cursor):
    try:
        # Check if the ticket exists
        cursor.execute(f"SELECT * FROM Booking WHERE Flight_No = '{flight_no}' AND Seat = '{seat}'")
        existing_data = cursor.fetchone()

        if existing_data:
            cursor.execute(f"DELETE FROM Booking WHERE Flight_No = '{flight_no}' AND Seat = '{seat}'")
            con.commit()

    except Exception as err:
        print(f"Error: {err}")

def cancel_ticket(cursor):
    # Get input from the user
    flight_no = input("Enter Flight No: ")
    seat = input("Enter Seat: ")

    try:
        # Check if the ticket exists
        cursor.execute(f"SELECT * FROM Ticket WHERE Flight_No = '{flight_no}' AND Seat = '{seat}'")
        existing_ticket_data = cursor.fetchone()

        if existing_ticket_data:

            delete_rating(flight_no,seat,cur)
            delete_baggage(flight_no,seat,cur)
            delete_booking(flight_no,seat,cur)
            cursor.execute(f"DELETE FROM Ticket WHERE Flight_No = '{flight_no}' AND Seat = '{seat}'")
            con.commit()

            print("Ticket canceled successfully.")
        else:
            print("Ticket not found. Please check your input.")

    except Exception as err:
        print(f"Error: {err}")


def Delete():
    print("Please choose type of deletion from below:")
    print("1. Employee")
    print("2. Ticket")
    print("3. Baggage")

    ch = int(input("Enter choice> "))
    tmp = sp.call('clear', shell=True)

    if (ch == 1):
        try:
            row = {}
            id = (input("Enter EmployeeID :"))
            query1 = "SELECT Job_Type FROM Employee WHERE EmployeeID = %s"

            cur.execute(query1, (id,))
            job = cur.fetchall()

            if job[0]['Job_Type'] == 'Technician':
                query3 = "DELETE FROM Specializations WHERE EmployeeID = %s"
                cur.execute(query3, (id,))
                con.commit()

                query2 = "DELETE FROM Technician WHERE EmployeeID = %s"
                cur.execute(query2, (id,))
                con.commit()

            elif job[0]['Job_Type'] == 'Pilot':
                query5 = "DELETE FROM Languages_Known WHERE EmployeeID = %s"
                cur.execute(query5, (id,))
                con.commit()

                query4 = "DELETE FROM Pilot WHERE EmployeeID = %s"
                cur.execute(query4, (id,))
                con.commit()

            elif job[0]['Job_Type'] == 'Ground Staff':
                query6 = "DELETE FROM Ground_Staff WHERE EmployeeID = %s"
                cur.execute(query6, (id,))
                con.commit()

            elif job[0]['Job_Type'] == 'Flight Attendant':
                query5 = "DELETE FROM Languages_Known WHERE EmployeeID = %s"
                cur.execute(query5, (id,))
                con.commit()

                query8 = "DELETE FROM Service_Awards WHERE EmployeeID = %s"
                cur.execute(query8, (id,))
                con.commit()

                query8 = "DELETE FROM Flight_Attendant_Emergency WHERE EmployeeID = %s"
                cur.execute(query8, (id,))
                con.commit()

                query7 = "DELETE FROM Flight_Attendant WHERE EmployeeID = %s"
                cur.execute(query7, (id,))
                con.commit()

            query = "DELETE FROM Employee WHERE EmployeeID = %s"
            cur.execute(query, (id,))
            con.commit()

            print("Deleted successfully")
            return

        except Exception as e:
            con.rollback()
            print("Deletion Failed")
            print(">>>>>>>>>>>>>", e)

        return
    elif (ch==2):
      cancel_ticket(cur)

    elif (ch == 3):
        try :
            row = {}
            no = (input("Enter Flight_No :"))
            seat = (input("Enter Seat_No :"))
            id = (input("Enter Baggage Id :"))

            query = "DELETE FROM Baggage WHERE Flight_No = %s and Seat = %s and BaggageID = %s"
            cur.execute(query, (no,seat,id,))
            con.commit()

            print("Deleted successfully")

        except Exception as e:
            con.rollback()
            print("Deletion Failed")
            print(">>>>>>>>>>>>>", e)

        return

def update_pilot_info(cursor):
    try:
        employee_id = input("Enter EmployeeID of the pilot: ")
        cursor.execute(f"SELECT * FROM Pilot WHERE EmployeeID = '{employee_id}'")
        existing_pilot_data = cursor.fetchone()

        if existing_pilot_data:
            print("Existing Pilot Details:")
            table = PrettyTable()


            table.field_names = existing_pilot_data.keys()

            table.add_row(existing_pilot_data.values())

            print(table)

            print("Choose information to update:")
            print("1. Flight Hours")
            print("2. Aircraft Type Rating")
            choice = input("Enter choice: ")

            if choice == '1':
                new_flight_hours = int(input("Enter new Flight Hours: "))
                cursor.execute("UPDATE Pilot SET Flight_Hours = %s WHERE EmployeeID = %s", (new_flight_hours, employee_id))
            elif choice == '2':
                new_aircraft_type_rating = input("Enter new Aircraft Type Rating: ")
                cursor.execute("UPDATE Pilot SET Aircraft_Type_Rating = %s WHERE EmployeeID = %s", (new_aircraft_type_rating, employee_id))
            else:
                print("Invalid choice. No updates were made.")

            cursor.connection.commit()

            print("Pilot information updated successfully!")
        else:
            print("Pilot not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

def update_flight_attendant_supervisor(cursor):
    try:
        employee_id = input("Enter EmployeeID of the flight attendant: ")

        cursor.execute(f"SELECT * FROM Flight_Attendant WHERE EmployeeID = '{employee_id}'")
        existing_attendant_data = cursor.fetchone()

        if existing_attendant_data:
            print("Existing Flight Attendant Details:")
            table = PrettyTable()


            table.field_names = existing_attendant_data.keys()

            table.add_row(existing_attendant_data.values())

            print(table)

            new_supervisor_id = input("Enter new SupervisorID: ")

            cursor.execute("UPDATE Flight_Attendant SET SupervisorID = %s WHERE EmployeeID = %s", (new_supervisor_id, employee_id))

            cursor.connection.commit()

            print("Flight Attendant supervisor updated successfully!")
        else:
            print("Flight Attendant not found.")
    except Exception as e:
        print(f"An error occurred: {e}")



def update_flight_details(cursor):
    try:
        flight_no = input("Enter Flight_No: ")

        cursor.execute(f"SELECT * FROM Flight WHERE Flight_No = '{flight_no}'")
        existing_flight_data = cursor.fetchone()

        if existing_flight_data:
            print("Existing Flight Details:")
            table = PrettyTable()
            table.field_names = existing_flight_data.keys()
            table.add_row(existing_flight_data.values())
            print(table)

            print("Choose the field to update:")
            print("1. SchDepDate")
            print("2. SchDepTime")
            print("3. DepDate")
            print("4. DepTime")
            print("5. SchArrDate")
            print("6. SchArrTime")
            print("7. ArrDate")
            print("8. ArrTime")
            print("9. Status")
            print("10. AircraftID")

            field_choice = int(input("Enter the field number to update: "))

            # Get the new value from the user
            new_value = input("Enter the new value: ")

            # Map the field choice to the corresponding column name
            field_mapping = {
                1: "SchDepDate",
                2: "SchDepTime",
                3: "DepDate",
                4: "DepTime",
                5: "SchArrDate",
                6: "SchArrTime",
                7: "ArrDate",
                8: "ArrTime",
                9: "Status",
                10: "AircraftID",
            }

            # Update the database with the new value
            cursor.execute(f"UPDATE Flight SET {field_mapping[field_choice]} = %s WHERE Flight_No = %s", (new_value, flight_no))

            # Commit the changes
            cursor.connection.commit()

            print("Flight information updated successfully!")
        else:
            print("Flight not found.")
    except Exception as e:
        print(f"An error occurred: {e}")


def update_distance_travelled(cursor):
    try:
        aircraft_id = input("Enter AircraftID: ")

        cursor.execute(f"SELECT * FROM Aircraft WHERE AircraftID = '{aircraft_id}'")
        existing_aircraft_data = cursor.fetchone()

        if existing_aircraft_data:
            print("Existing Aircraft Details:")
            table = PrettyTable()
            table.field_names = existing_aircraft_data.keys()
            table.add_row(existing_aircraft_data.values())
            print(table)

            new_distance_travelled = float(input("Enter new Distance_Travelled: "))

            cursor.execute("UPDATE Aircraft SET Distance_Travelled = %s WHERE AircraftID = %s", (new_distance_travelled, aircraft_id))

            cursor.connection.commit()

            print("Distance Travelled updated successfully!")
        else:
            print("Aircraft not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

def update_passenger_info(cursor):
    try:
        passenger_id = input("Enter Passenger ID (Pid): ")
        cursor.execute(f"SELECT * FROM Passenger WHERE Pid = '{passenger_id}'")
        existing_passenger_data = cursor.fetchone()

        if existing_passenger_data:
            print("Existing Passenger Details:")
            table = PrettyTable()
            table.field_names = existing_passenger_data.keys()
            table.add_row(existing_passenger_data.values())
            print(table)

            print("Choose information to update:")
            print("1. Nationality")
            print("2. ID Type and ID Number")
            print("3. Email")

            choice = input("Enter choice: ")

            if choice == '1':
                new_nationality = input("Enter new Nationality: ")
                cursor.execute("UPDATE Passenger SET Nationality = %s WHERE Pid = %s", (new_nationality, passenger_id))

            elif choice == '2':
                new_id_type = input("Enter new ID Type: ")
                new_id_number = input("Enter new ID Number: ")
                cursor.execute("UPDATE Passenger SET ID_type = %s, ID_No = %s WHERE Pid = %s", (new_id_type, new_id_number, passenger_id))

            elif choice == '3':
                new_email = input("Enter new Email: ")
                cursor.execute("UPDATE Passenger SET Email = %s WHERE Pid = %s", (new_email, passenger_id))

            else:
                print("Invalid choice. No updates were made.")

            cursor.connection.commit()

            print("Passenger information updated successfully!")
        else:
            print("Passenger not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

def update_airport_info(cursor):
    try:
        # Get user input for Airport_Code
        airport_code = input("Enter Airport Code: ")

        # Fetch existing details for the airport
        cursor.execute(f"SELECT * FROM Airport WHERE Airport_Code = '{airport_code}'")
        existing_airport_data = cursor.fetchone()

        # Check if the airport exists
        if existing_airport_data:
            print("Existing Airport Details:")
            table = PrettyTable()
            table.field_names = existing_airport_data.keys()
            table.add_row(existing_airport_data.values())
            print(table)

            # Ask the user which information they want to update
            print("Choose information to update:")
            print("1. Name")
            print("2. Airport Type")
            print("3. Street and City")
            print("4. No of Gates")
            print("5. No of Belts")

            choice = input("Enter choice: ")

            if choice == '1':
                new_name = input("Enter new Name: ")
                cursor.execute("UPDATE Airport SET Name = %s WHERE Airport_Code = %s", (new_name, airport_code))
                cursor.connection.commit()


            elif choice == '2':
                new_airport_type = input("Enter new Airport Type: ")
                cursor.execute("UPDATE Airport SET Airport_Type = %s WHERE Airport_Code = %s", (new_airport_type, airport_code))
                cursor.connection.commit()


            elif choice == '3':
                new_street = input("Enter new Street: ")
                cursor.execute("UPDATE Airport SET Street = %s WHERE Airport_Code = %s", (new_street, airport_code))

                # If street is updated, ask for the city, state, and country
                new_city = input("Enter new City: ")
                new_state = input("Enter new State: ")
                new_country = input("Enter new Country: ")

                # Check if the city already exists in the Address table
                cursor.execute("SELECT * FROM Address WHERE City = %s", (new_city,))
                existing_city_data = cursor.fetchone()

                if not existing_city_data:
                    # If the city doesn't exist, add it to the Address table
                    cursor.execute("INSERT INTO Address (City, State, Country) VALUES (%s, %s, %s)", (new_city, new_state, new_country))
                    con.commit()
            elif choice == '4':
                new_no_gates = int(input("Enter new No of Gates: "))
                cursor.execute("UPDATE Airport SET NoGates = %s WHERE Airport_Code = %s", (new_no_gates, airport_code))
                cursor.connection.commit()


            elif choice == '5':
                new_no_belts = int(input("Enter new No of Belts: "))
                cursor.execute("UPDATE Airport SET NoBelts = %s WHERE Airport_Code = %s", (new_no_belts, airport_code))
                cursor.connection.commit()

            else:
                print("Invalid choice. No updates were made.")

            # Commit the changes

            print("Airport information updated successfully!")
        else:
            print("Airport not found.")
    except Exception as e:
        print(f"An error occurred: {e}")


def update_ticket_details(cursor):
    try:
        # Get user input for Flight_No and Seat
        flight_no = input("Enter Flight No: ")
        seat = input("Enter Seat: ")

        # Fetch existing details for the ticket
        cursor.execute(f"SELECT * FROM Ticket WHERE Flight_No = '{flight_no}' AND Seat = '{seat}'")
        existing_ticket_data = cursor.fetchone()

        # Check if the ticket exists
        if existing_ticket_data:
            print("Existing Ticket Details:")
            table = PrettyTable()
            table.field_names = existing_ticket_data.keys()
            table.add_row(existing_ticket_data.values())
            print(table)

            # Get user input for the field to update
            print("Choose the field to update:")
            print("1. Baggage")
            print("2. Category")
            print("3. Price")

            field_choice = int(input("Enter the field number to update: "))

            # Get the new value from the user
            new_value = input("Enter the new value: ")

            # Map the field choice to the corresponding column name
            field_mapping = {
                1: "Baggage",
                2: "Category",
                3: "Price",
            }

            # Update the database with the new value
            cursor.execute(f"UPDATE Ticket SET {field_mapping[field_choice]} = %s WHERE Flight_No = %s AND Seat = %s", (new_value, flight_no, seat))

            # Commit the changes
            cursor.connection.commit()

            print("Ticket information updated successfully!")
        else:
            print("Ticket not found.")
    except Exception as e:
        print(f"An error occurred: {e}")


def Update():
    print("Please choose type of updation from below:")
    print("1. Pilot information")
    print("2. Flight Attendant Supervisor")
    print("3. Flight scheduled details")
    print("4. Aircraft distance travelled")
    print("5. Passenger records")
    print("6. Airport information")
    print("7. Ticket details")

    ch = int(input("Enter choice> "))
    tmp = sp.call('clear', shell=True)
    if ch == 1:
        update_pilot_info(cur)
    elif ch == 2:
        update_flight_attendant_supervisor(cur)
    elif ch == 3:
        update_flight_details(cur)
    elif ch==4:
        update_distance_travelled(cur)
    elif ch==5:
        update_passenger_info(cur)
    elif ch == 6:
        update_airport_info(cur)
    elif ch==7:
        update_ticket_details(cur)

    else:
        print("Invalid choice")

def Retrieve():
    print("Please choose type of retrieval from the menu below:")
    print("1. List all attributes of Ground Staff in a particular Airport")
    print("2. List details of all Passengers in a particular Flight Scheduled")
    print("3. Retrieve names of Technicians and their respective Specialization")
    print("4. List Vendor and Price for menu planning of Meal")
    print("5. List the Aircraft ID of Aircrafts with Capacity greater than X")
    print("6. Calculate the Average Rating for Flight scheduled")

    ch = int(input("Enter choice> "))
    tmp = sp.call('clear', shell=True)

    if (ch == 1):
        try:
            row = {}
            name = (input("Enter the Airport Name: "))
            query = "SELECT Ground_Staff.EmployeeID, Role, Work_Shift, Ground_Staff.Airport_Code MngrID FROM Ground_Staff JOIN Employee ON Employee.EmployeeID = Ground_Staff.EmployeeID JOIN Airport ON Ground_Staff.Airport_Code = Airport.Airport_Code WHERE Airport.Name = %s"

            cur.execute(query, (name,))
            ground_staff_attributes = cur.fetchall()

            if ground_staff_attributes :
              table = PrettyTable()
              table.field_names = ground_staff_attributes[0].keys()
              for row in ground_staff_attributes:
                  table.add_row(row.values())
              print(table)

        except Exception as e:
            con.rollback()
            print("Failed to find an Airport with given name")
            print(">>>>>>>>>>>>>", e)
        return

    elif (ch == 2):
        try:
            row = {}
            flight_no = (input("Enter Flight Number: "))
            query = "SELECT * FROM Passenger JOIN Booking USING (Pid) WHERE Flight_No = %s"

            cur.execute(query, (flight_no))
            passanger_details = cur.fetchall()

            if passanger_details :
              table = PrettyTable()
              table.field_names = passanger_details[0].keys()
              for row in passanger_details:
                  table.add_row(row.values())
              print(table)

        except Exception as e:
            con.rollback()
            print("Failed to find passanger details in given flight")
            print(">>>>>>>>>>>>>", e)
        return

    elif (ch == 3):
        try:
            row = {}
            query = "SELECT * FROM Technician JOIN Specializations USING (EmployeeID)"

            cur.execute(query, ())
            Technicians = cur.fetchall()

            if Technicians :
              table = PrettyTable()
              table.field_names = Technicians[0].keys()
              for row in Technicians:
                  table.add_row(row.values())
              print(table)

        except Exception as e:
            con.rollback()
            print("Failed to find Technicians with Specializations")
            print(">>>>>>>>>>>>>", e)
        return

    elif (ch == 4):
        try:
            row = {}
            query = "SELECT * FROM Meals JOIN Dishes USING (MealID)"

            cur.execute(query, ())
            meal = cur.fetchall()

            if meal :
              table = PrettyTable()
              table.field_names = meal[0].keys()
              for row in meal:
                  table.add_row(row.values())
              print(table)

        except Exception as e:
            con.rollback()
            print("Failed to find vendors and meals")
            print(">>>>>>>>>>>>>", e)
        return

    if (ch == 5):
        try:
            row = {}
            cap = int((input("Enter minimum required Passenger Capacity ")))
            query = "SELECT Aircraft.AircraftID, Aircraft_Model_Details.Passenger_Capacity FROM Aircraft, Aircraft_Model_Details WHERE Aircraft.Model_Number = Aircraft_Model_Details.Model_Number and Passenger_Capacity >= %s"

            cur.execute(query, (cap,))
            aircraft = cur.fetchall()

            if aircraft :
              table = PrettyTable()
              table.field_names = aircraft[0].keys()
              for row in aircraft:
                  table.add_row(row.values())
              print(table)

        except Exception as e:
            con.rollback()
            print("Failed to find an Aircraft with capacity greater than or equal to given capacity.")
            print(">>>>>>>>>>>>>", e)
        return

    if (ch == 6):
        try:
            row = {}
            query = "SELECT Flight_No, AVG(Stars) FROM Rating GROUP BY Flight_No"

            cur.execute(query, ())
            rating = cur.fetchall()

            if rating :
              table = PrettyTable()
              table.field_names = rating[0].keys()
              for row in rating:
                  table.add_row(row.values())
              print(table)

        except Exception as e:
            con.rollback()
            print("Failed to find average rating")
            print(">>>>>>>>>>>>>", e)
        return

    return

def Search():
    print("Please choose the type of search from the menu below:")
    print("1. Search for Aircrafts purchased in a particular year")
    print("2. Search for Meals that are VEG")
    print("3. Search for Flight Attendants based on Language spoken")

    ch = int(input("Enter choice> "))
    tmp = sp.call('clear', shell=True)

    try:
        if ch == 1:
            year = input("Enter the year: ")
            query = "SELECT * FROM Aircraft WHERE YEAR(Purchase_Date) = %s"
            cur.execute(query, (year,))
            aircraft = cur.fetchall()
            if not aircraft:
                print("No aircraft was purchased in this year")
            else:
                table=PrettyTable()
                table.field_names=aircraft[0].keys()
                for row in aircraft:
                    table.add_row(row.values())
                print(table)
        elif ch == 2:
            flight_id = input("Enter Flight ID: ")
            query = """
                SELECT Dishes.Name, Meals.vendor, Meals.price
                FROM Meals
                INNER JOIN Serves ON Meals.MealID = Serves.MealID
                INNER JOIN Dishes ON Meals.MealID = Dishes.MealID
                WHERE Serves.FlightNo = %s AND Meals.variety = 'Veg'
            """
            cur.execute(query, (flight_id,))
            meals = cur.fetchall()
            if not meals:
                print("No meals found")
            else:
                table=PrettyTable()
                table.field_names=meals[0].keys()
                for row in meals:
                    table.add_row(row.values())
                print(table)

        elif ch == 3:
            language = input("Enter the language: ")
            query = """
                SELECT Employee.EmployeeID, Employee.Fname, Employee.Lname, Employee.Nationality, Employee.Gender
                FROM Employee
                INNER JOIN Flight_Attendant ON Employee.EmployeeID = Flight_Attendant.EmployeeID
                INNER JOIN Languages_Known ON Flight_Attendant.EmployeeID = Languages_Known.EmployeeID
                WHERE Languages_Known.Language = %s
            """
            cur.execute(query, (language,))
            attendants = cur.fetchall()
            if not attendants:
                print("No attendant can speak this language")
            else:
                table=PrettyTable()
                table.field_names=attendants[0].keys()
                for row in attendants:
                    table.add_row(row.values())
            print(table)

        else:
            print("Invalid choice. Please enter a valid choice.")

    except Exception as e:
        con.rollback()
        print(f"Failed to execute the search query. Error: {e}")

def get_busiest_airports(cursor):
    try:
        # Query to retrieve the busiest airports and count of departing and arriving flights
        query = """
            SELECT
                a.Airport_Code,
                a.Name AS Airport_Name,
                COUNT(DISTINCT da.Flight_No) AS Departing_Flights,
                COUNT(DISTINCT aa.Flight_No) AS Arriving_Flights,
                COUNT(DISTINCT da.Flight_No) + COUNT(DISTINCT aa.Flight_No) AS Total_Flights
            FROM
                Airport a
            LEFT JOIN
                Transits_Dep da ON a.Airport_Code = da.DepAirportCode
            LEFT JOIN
                Transits_Arr aa ON a.Airport_Code = aa.ArrAirportCode
            GROUP BY
                a.Airport_Code, a.Name
            ORDER BY
                Total_Flights DESC;
        """


        # Execute the query
        cursor.execute(query)

        # Fetch the results
        results = cursor.fetchall()
        if results:
            # Create a PrettyTable instance
            table = PrettyTable()
            table.field_names = ["Airport Code", "Airport Name", "Departing Flights", "Arriving Flights", "Total Flights"]

            # Add data to the table
            for row in results:
                table.add_row(row.values())

            # Print the table
            print(table)
        else:
            print("No data found.")

    except Exception as e:
        print(f"An error occurred: {e}")

def find_airport_with_longest_delay(cursor):
    try:
        # Query to find the airport with the longest average flight delay time
        query = """
        SELECT
    a.Airport_Code,
    a.Name AS Airport_Name,
    AVG(TIMESTAMPDIFF(MINUTE, f.SchDepTime, f.DepTime)) AS AvgDelay
FROM
    Flight f
JOIN
    Transits_Dep td ON f.Flight_No = td.Flight_No
JOIN
    Airport a ON td.DepAirportCode = a.Airport_Code
WHERE
    f.SchDepTime IS NOT NULL
    AND f.DepTime IS NOT NULL
GROUP BY
    td.DepAirportCode
ORDER BY
    AvgDelay DESC;
        """

        # Execute the query
        cursor.execute(query)

        # Fetch the result
        result = cursor.fetchone()

        if result:
            # Create a PrettyTable instance
            table = PrettyTable()
            table.field_names = ["Airport Code", "Airport Name", "Average Delay (minutes)"]

            # Add data to the table
            table.add_row(result.values())

            # Print the table
            print(table)
        else:
            print("No data found.")

    except Exception as e:
        print(f"An error occurred: {e}")


def service_quality(cursor):
    try:
        # Query to evaluate flight attendant service quality based on passenger ratings
        query = "select c.AttendantHeadID, AVG(r.Stars) AS Average_Rating from Crew c join Rating r on c.FlightNo = r.Flight_No group by c.AttendantHeadID order by Average_Rating desc;"

        # Execute the query
        cursor.execute(query)

        # Fetch the results
        results = cursor.fetchall()

        if results:
            # Create a PrettyTable instance
            table = PrettyTable()
            table.field_names = ["Attendant ID", "Average Rating"]

            # Add data to the table
            for row in results:
                table.add_row(row.values())

            # Print the table
            print(table)
        else:
            print("No data found.")

    except Exception as e:
        print(f"An error occurred: {e}")


def Analysis():
    print("These are the analysis we provide:")
    print("1. Analyze the top 3 busiest Airports and the number of Flights")
    print("2. Find the Airport with the longest average Flight delay time")
    print("3. Evaluate the service quality of Flight Attendants using passenger Ratings")

    ch = int(input("Enter choice> "))
    tmp = sp.call('clear', shell=True)
    if ch==1:
        get_busiest_airports(cur)
    elif ch==2:
        find_airport_with_longest_delay(cur)
    elif ch==3:
        service_quality(cur)
    else:
        print("Invalid Command")

def Display():
    print("Select which table you want to view: ")
    print("1. Airport")
    print("2. Employees")
    print("3. Flights")
    print("4. Tickets")

    ch = int(input("Enter choice: "))
    tmp = sp.call('clear', shell=True)

    if(ch == 1):
        query = "SELECT * from Airport"
        cur.execute(query)
        results = cur.fetchall()       

        if results :
            table = PrettyTable()
            table.field_names = results[0].keys()
            for row in results:
                table.add_row(row.values())
            print(table)

    elif(ch == 2):
        query = "SELECT * from Employee"
        cur.execute(query)
        results = cur.fetchall()       

        if results :
            table = PrettyTable()
            table.field_names = results[0].keys()
            for row in results:
                table.add_row(row.values())
            print(table)

    elif(ch == 3):
        query = "SELECT * from Flight"
        cur.execute(query)
        results = cur.fetchall()       

        if results :
            table = PrettyTable()
            table.field_names = results[0].keys()
            for row in results:
                table.add_row(row.values())
            print(table)

    elif(ch == 4):
        query = "SELECT * from Ticket"
        cur.execute(query)
        results = cur.fetchall()       

        if results :
            table = PrettyTable()
            table.field_names = results[0].keys()
            for row in results:
                table.add_row(row.values())
            print(table)
    
    else:
        print("Invalid Choice")
    return

def dispatch(ch):
    if(ch == 1):
        Insert()
    elif(ch == 2):
        Delete()
    elif(ch == 3):
        Update()
    elif(ch == 4):
        Retrieve()
    elif(ch == 5):
        Search()
    elif(ch == 6):
        Analysis()
    elif(ch == 7):
        Display()
    else:
        print("Error: Invalid Option")

while(1):
    tmp = sp.call('clear',shell=True)
    try:
        con = pymysql.connect(host='localhost',port=3306,user="root",password="password",db='SkyLogix',cursorclass=pymysql.cursors.DictCursor)
        tmp = sp.call('clear',shell=True)

        if(con.open):
            print("Connected to database:)")
        else:
            print("Failed to connect")

        with con.cursor() as cur:
            while(1):
                tmp = sp.call('clear',shell=True)
                print("---------------------Welcome To SkyLogix---------------------")
                print("Menu: ")
                print("1. Insert a new entry")
                print("2. Delete an existing entry")
                print("3. Update records")
                print("4. Retrieve information")
                print("5. Search for entries")
                print("6. View analytics")
                print("7. View current state of database")
                print("8. Logout")

                ch = int(input("Enter choice: "))
                tmp = sp.call('clear', shell=True)
                if ch == 8:
                    print("Hope to see you again soon:)")
                    exit()
                else:
                    dispatch(ch)
                    tmp = input("Press enter to continue")

    except Exception as e:
        tmp = sp.call('clear', shell=True)
        print(e)
        print("Connection Refused: Either username or password is incorrect or user doesn't have access to database")
        tmp = input("Enter any key to CONTINUE: ")